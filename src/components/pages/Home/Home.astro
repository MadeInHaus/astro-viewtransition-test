---
import grid from '@/styles/modules/grid.module.scss';
import styles from './Home.module.scss';

const GITHUB_URL = 'https://github.com/MadeInHaus/astro-starter-ts';

const demoLinks = [{ href: '/demos/carousel', label: 'Carousel' }];
---

<div class:list={[styles.root, grid.container]}>
    <section class={styles.section}>
        <h2 class={styles.sectionHeadline}>Demos</h2>
        <ul>
            {
                demoLinks.map(({ href, label }) => (
                    <li class={styles.link}>
                        <a href={href}>
                            <span>{label}</span>
                        </a>
                    </li>
                ))
            }
        </ul>
    </section>
    <section class={styles.section}>
        <h2 class:list={[styles.sectionHeadline, 'body']}>Theme</h2>
        <theme-buttons>
            <ul class={styles.themeButtons}>
                <li><button data-theme="auto" class={styles.themeButton}>Automatic</button></li>
                <li><button data-theme="light" class={styles.themeButton}>Light</button></li>
                <li><button data-theme="dark" class={styles.themeButton}>Dark</button></li>
            </ul>
        </theme-buttons>
    </section>
    <section class={styles.section}>
        <h2 class:list={[styles.sectionHeadline, 'body']}>Source</h2>
        <ul>
            <li class={styles.link}>
                <a href={GITHUB_URL}>
                    <span>{GITHUB_URL}</span>
                </a>
            </li>
        </ul>
    </section>
</div>

<script>
    import { getTheme, setTheme, type ThemeValue } from '@/components/ui/Theme/ThemeController';

    class ThemeButtons extends HTMLElement {
        private buttons: NodeListOf<HTMLButtonElement>;
        constructor() {
            super();
            this.buttons = this.querySelectorAll('button');
            this.update();
        }
        connectedCallback() {
            this.buttons.forEach(button => button.addEventListener('click', this.handleClick));
        }
        disconnectedCallback() {
            this.buttons.forEach(button => button.removeEventListener('click', this.handleClick));
        }
        private handleClick = (event: MouseEvent) => {
            const button = event.target as HTMLButtonElement;
            const theme = button.dataset.theme as ThemeValue;
            setTheme(theme ?? 'auto');
            this.update();
        };
        private update() {
            const theme = getTheme();
            this.buttons.forEach(button => {
                button.disabled = button.dataset.theme === theme;
            });
        }
    }

    if (!customElements.get('theme-buttons')) {
        customElements.define('theme-buttons', ThemeButtons);
    }
</script>
